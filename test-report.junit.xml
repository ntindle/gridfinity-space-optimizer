<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="213" failures="0" errors="0" time="5.030902545">
    <testsuite name="src/components/GridfinityCalculator.test.tsx" timestamp="2025-08-15T14:55:38.974Z" hostname="pkrvmubgrv54qmi" tests="10" failures="0" errors="0" skipped="0" time="1.190646855">
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should render all main sections" time="0.244214834">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should load saved settings on mount" time="0.063704848">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should save settings when values change" time="0.188271789">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should display results when calculation completes" time="0.04816064">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should toggle between inches and millimeters" time="0.076768532">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should update printer selection" time="0.203553227">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should handle half-size bin options" time="0.090895375">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should update number of drawers" time="0.076455867">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should handle invalid drawer dimensions gracefully" time="0.06794864">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator.test.tsx" name="GridfinityCalculator &gt; should recalculate when dimensions change" time="0.128404751">
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/useCustomPrinter.test.ts" timestamp="2025-08-15T14:55:38.991Z" hostname="pkrvmubgrv54qmi" tests="17" failures="0" errors="0" skipped="0" time="0.179953266">
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Basic functionality &gt; should initialize with default values" time="0.039014218">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Basic functionality &gt; should handle dimension input changes in mm" time="0.010091489">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Basic functionality &gt; should handle dimension input changes in inches" time="0.076165661">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Basic functionality &gt; should validate dimensions" time="0.006405487">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Basic functionality &gt; should reset to defaults" time="0.003681394">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should initialize exclusion zones as empty" time="0.002196528">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should handle exclusion zone input in mm" time="0.002485727">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should handle exclusion zone input in inches" time="0.002789386">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should validate exclusion zones against printer dimensions" time="0.003298798">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should clear exclusion zone when empty string is provided" time="0.004044638">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should handle multiple exclusion zones" time="0.002681454">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should reset exclusion zones when resetting to defaults" time="0.003963862">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should validate left/right exclusions against X dimension" time="0.007374459">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Exclusion zone functionality &gt; should validate front/back exclusions against Y dimension" time="0.002776411">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Unit conversion &gt; should convert exclusion zones when unit changes" time="0.003264023">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Persistence &gt; should persist custom dimensions with exclusion zones" time="0.002312894">
        </testcase>
        <testcase classname="src/hooks/useCustomPrinter.test.ts" name="useCustomPrinter &gt; Persistence &gt; should handle exclusion zones in custom dimensions" time="0.001964944">
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/useGridfinityCalculation.test.ts" timestamp="2025-08-15T14:55:38.994Z" hostname="pkrvmubgrv54qmi" tests="8" failures="0" errors="0" skipped="8" time="0">
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should calculate results for standard printer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should use custom printer size when selected" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should handle half-size bins when enabled" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should multiply results by number of drawers" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should memoize printer size calculation" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should handle null drawer size gracefully" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should use default printer size for unknown printer" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/hooks/useGridfinityCalculation.test.ts" name="useGridfinityCalculation &gt; should update results when inputs change" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/hooks/usePersistedState.test.ts" timestamp="2025-08-15T14:55:38.996Z" hostname="pkrvmubgrv54qmi" tests="10" failures="0" errors="0" skipped="0" time="0.048759329">
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should initialize with default value when localStorage is empty" time="0.019988645">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should initialize with value from localStorage when available" time="0.001592167">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should update localStorage when state changes" time="0.003806257">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should handle complex objects" time="0.002698386">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should handle localStorage errors gracefully" time="0.002551251">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should provide reset function" time="0.00259875">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should sync across tabs when enabled" time="0.004293628">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should not sync across tabs when disabled" time="0.003953602">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should use custom serialization/deserialization" time="0.002900503">
        </testcase>
        <testcase classname="src/hooks/usePersistedState.test.ts" name="usePersistedState &gt; should handle malformed localStorage data" time="0.002201005">
        </testcase>
    </testsuite>
    <testsuite name="src/services/unitConversion.test.ts" timestamp="2025-08-15T14:55:38.998Z" hostname="pkrvmubgrv54qmi" tests="30" failures="0" errors="0" skipped="0" time="0.030613831">
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; constants &gt; should have correct inch to mm conversion factor" time="0.001360404">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertToMm &gt; should return same value when unit is mm" time="0.000215603">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertToMm &gt; should convert inches to mm correctly" time="0.009766061">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertToMm &gt; should default to inches when no unit specified" time="0.000249767">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertToMm &gt; should throw error for unknown unit" time="0.001184445">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertFromMm &gt; should return same value when unit is mm" time="0.001038111">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertFromMm &gt; should convert mm to inches correctly" time="0.008849526">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertFromMm &gt; should default to inches when no unit specified" time="0.000220873">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; convertFromMm &gt; should throw error for unknown unit" time="0.000404827">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatDimension &gt; should format mm with 0 decimal places by default" time="0.000411329">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatDimension &gt; should format inches with 1 decimal place by default" time="0.00038521">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatDimension &gt; should use custom precision when specified" time="0.000139941">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatDimension &gt; should default to mm when no unit specified" time="0.000137697">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatBuildVolume &gt; should format build volume in mm" time="0.000348041">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatBuildVolume &gt; should format build volume in inches" time="0.000216695">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatBuildVolume &gt; should handle missing z dimension" time="0.000179236">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; formatBuildVolume &gt; should return empty string for null dimensions" time="0.000169146">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should parse number input" time="0.00068452">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should parse string with mm unit" time="0.000461072">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should parse string with inch unit" time="0.00028313">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should parse string without unit using default" time="0.000326149">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should handle decimal values" time="0.000227416">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; parseDimension &gt; should throw error for invalid format" time="0.000399858">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should validate positive dimensions within range" time="0.000215022">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should reject zero when not allowed" time="0.000253013">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should allow zero when specified" time="0.000125285">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should reject values below minimum" time="0.00012845">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should reject values above maximum" time="0.000124352">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should use custom min/max when specified" time="0.000169937">
        </testcase>
        <testcase classname="src/services/unitConversion.test.ts" name="unitConversion &gt; validateDimension &gt; should include formatted dimension in error messages" time="0.000112911">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.exclusionZones.test.ts" timestamp="2025-08-15T14:55:39.003Z" hostname="pkrvmubgrv54qmi" tests="4" failures="0" errors="0" skipped="0" time="0.100739762">
        <testcase classname="src/utils/gridfinityUtils.exclusionZones.test.ts" name="gridfinityUtils - Exclusion Zones &gt; Basic exclusion zone calculations &gt; should reduce effective printer size with front exclusion zone" time="0.066505112">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.exclusionZones.test.ts" name="gridfinityUtils - Exclusion Zones &gt; Basic exclusion zone calculations &gt; should handle multiple exclusion zones simultaneously" time="0.015040591">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.exclusionZones.test.ts" name="gridfinityUtils - Exclusion Zones &gt; Basic exclusion zone calculations &gt; should handle zero exclusion zones" time="0.011366122">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.exclusionZones.test.ts" name="gridfinityUtils - Exclusion Zones &gt; Real-world scenarios &gt; should calculate correct layout for Bambu X1C with exclusion zone" time="0.006232333">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.layout.test.ts" timestamp="2025-08-15T14:55:39.004Z" hostname="pkrvmubgrv54qmi" tests="12" failures="0" errors="0" skipped="0" time="0.188459678">
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should calculate correct layout for 22.5&quot; x 16.5&quot; drawer (standard US drawer)" time="0.116944907">
            <system-out>
Drawer size: [33m571.5[39m x [33m419.09999999999997[39m mm
Full grids: [33m13[39m x [33m9[39m
Remainders: [33m25.5[39m x [33m41.099999999999966[39m mm
Result baseplates: { [32m&apos;6x6&apos;[39m: [33m2[39m, [32m&apos;1x6&apos;[39m: [33m1[39m, [32m&apos;6x3&apos;[39m: [33m2[39m, [32m&apos;1x3&apos;[39m: [33m1[39m }
Result spacers: {
  [32m&apos;25.62mm x 252mm&apos;[39m: [33m1[39m,
  [32m&apos;25.62mm x 126mm&apos;[39m: [33m1[39m,
  [32m&apos;252mm x 41.16mm&apos;[39m: [33m2[39m,
  [32m&apos;42mm x 41.16mm&apos;[39m: [33m1[39m,
  [32m&apos;25.62mm x 41.16mm&apos;[39m: [33m1[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should handle exact grid multiples without spacers" time="0.002271767">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should split large baseplates to fit printer bed" time="0.004171528">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should generate correct spacers for small remainders" time="0.00257853">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should handle half-size bins when enabled" time="0.008236679">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should prefer half-size bins for spacers when preferHalfSize is true" time="0.015259208">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should calculate correct layout for metric drawer (500mm x 400mm)" time="0.003650695">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should handle very small drawers (smaller than one grid)" time="0.001872481">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should optimize baseplate selection for printer bed" time="0.008707009">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Real-world drawer scenarios &gt; should handle edge case of exact printer bed size" time="0.005215471">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Layout positioning verification &gt; should position items without overlaps" time="0.001800076">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.layout.test.ts" name="gridfinityUtils - Layout Logic &gt; Layout positioning verification &gt; should fill space efficiently without gaps" time="0.015380645">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.regression.test.ts" timestamp="2025-08-15T14:55:39.007Z" hostname="pkrvmubgrv54qmi" tests="63" failures="0" errors="0" skipped="0" time="1.946455232">
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should produce correct baseplates" time="0.074810263">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should produce correct spacers" time="0.004442734">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should have correct number of layout items" time="0.005586845">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should cover the entire drawer area" time="0.004714174">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should not have overlapping items" time="0.014043882">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; standardUSDrawer &gt; should not exceed printer dimensions" time="0.003849647">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should produce correct baseplates" time="0.001909139">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should produce correct spacers" time="0.001642671">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should have correct number of layout items" time="0.001633393">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should cover the entire drawer area" time="0.001855229">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should not have overlapping items" time="0.001808381">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; smallDrawer &gt; should not exceed printer dimensions" time="0.007649029">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should produce correct baseplates" time="0.002369049">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should produce correct spacers" time="0.00190936">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should have correct number of layout items" time="0.002214592">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should cover the entire drawer area" time="0.00556833">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should not have overlapping items" time="0.005078565">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; metricDrawer &gt; should not exceed printer dimensions" time="0.002508921">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should produce correct baseplates" time="0.000953994">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should produce correct spacers" time="0.000947571">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should have correct number of layout items" time="0.00328972">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should cover the entire drawer area" time="0.00084527">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should not have overlapping items" time="0.000972969">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactGridMultiple &gt; should not exceed printer dimensions" time="0.003383947">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should produce correct baseplates" time="0.002803411">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should produce correct spacers" time="0.002639575">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should have correct number of layout items" time="0.01125928">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should cover the entire drawer area" time="0.009431003">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should not have overlapping items" time="0.006852055">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; largeSplitRequired &gt; should not exceed printer dimensions" time="0.002668429">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should produce correct baseplates" time="0.001938324">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should produce correct spacers" time="0.001243685">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should produce correct half-size bins" time="0.001345305">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should have correct number of layout items" time="0.001218708">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should not have overlapping items" time="0.001329305">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; withHalfSizeBins &gt; should not exceed printer dimensions" time="0.001264364">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should produce correct baseplates" time="0.002109293">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should produce correct spacers" time="0.003315998">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should produce correct half-size bins" time="0.001827908">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should have correct number of layout items" time="0.002599951">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should not have overlapping items" time="0.001884774">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; preferHalfSize &gt; should not exceed printer dimensions" time="0.002057306">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should produce correct baseplates" time="0.00093611">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should produce correct spacers" time="0.000851873">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should have correct number of layout items" time="0.000867462">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should cover the entire drawer area" time="0.000841503">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should not have overlapping items" time="0.000934347">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; tinyDrawer &gt; should not exceed printer dimensions" time="0.000958483">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should produce correct baseplates" time="0.001349413">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should produce correct spacers" time="0.001169867">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should have correct number of layout items" time="0.001168234">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should cover the entire drawer area" time="0.001177963">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should not have overlapping items" time="0.001153236">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; exactPrinterSize &gt; should not exceed printer dimensions" time="0.001886176">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should produce correct baseplates" time="0.001250558">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should produce correct spacers" time="0.001371544">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should have correct number of layout items" time="0.001691021">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should cover the entire drawer area" time="0.001847384">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should not have overlapping items" time="0.003322994">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; ikeaDrawer &gt; should not exceed printer dimensions" time="0.001985692">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; Edge cases and error handling &gt; should handle zero-size drawer" time="0.000311873">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; Edge cases and error handling &gt; should handle negative drawer dimensions gracefully" time="0.000302435">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.regression.test.ts" name="gridfinityUtils - Regression Tests &gt; Edge cases and error handling &gt; should handle very large drawer dimensions" time="1.704028329">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.smartAllocation.test.ts" timestamp="2025-08-15T14:55:39.019Z" hostname="pkrvmubgrv54qmi" tests="8" failures="0" errors="0" skipped="0" time="0.189330647">
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should prefer 5+5+3 over 6+6+1 for 13-grid width" time="0.115360665">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should handle perfect divisions efficiently" time="0.012139796">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should avoid tiny remainders by adjusting division" time="0.013624101">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should prefer fewer baseplate variants" time="0.013381437">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should handle small drawers gracefully" time="0.003942461">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should respect printer size constraints" time="0.011400173">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should fall back to regular algorithm if smart allocation fails" time="0.005577317">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.smartAllocation.test.ts" name="Smart Baseplate Allocation &gt; should produce identical results when preferUniformBaseplates is false" time="0.007147493">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.snapshot.test.ts" timestamp="2025-08-15T14:55:39.021Z" hostname="pkrvmubgrv54qmi" tests="17" failures="0" errors="0" skipped="0" time="0.141214705">
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot for standard US drawer" time="0.069371715">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot for metric drawer" time="0.004714594">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot with half-size bins enabled" time="0.003633192">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot with prefer half-size" time="0.012496047">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot for small printer" time="0.012024951">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Standard configurations snapshots &gt; should match snapshot for large printer" time="0.002603817">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for IKEA MAXIMERA small" time="0.002853056">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for IKEA MAXIMERA medium" time="0.002094205">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for IKEA MAXIMERA large" time="0.00193614">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for US Kitchen standard" time="0.00381344">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for US Desk drawer" time="0.00592645">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common drawer sizes &gt; should match snapshot for Toolbox drawer" time="0.002861149">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common printer sizes &gt; should match snapshot for Prusa Mini" time="0.003020757">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common printer sizes &gt; should match snapshot for Ender 3" time="0.003076642">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common printer sizes &gt; should match snapshot for Prusa MK3S+" time="0.002893079">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common printer sizes &gt; should match snapshot for Bambu Lab A1" time="0.002662758">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.snapshot.test.ts" name="gridfinityUtils - Snapshot Tests &gt; Common printer sizes &gt; should match snapshot for Prusa XL" time="0.00298444">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.test.ts" timestamp="2025-08-15T14:55:39.025Z" hostname="pkrvmubgrv54qmi" tests="15" failures="0" errors="0" skipped="0" time="0.198331094">
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; calculateGrids &gt; should calculate correct grid layout for standard drawer size" time="0.108914795">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; calculateGrids &gt; should handle half-size bins when enabled" time="0.003318975">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; calculateGrids &gt; should generate spacers for non-standard dimensions" time="0.003570977">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; calculateGrids &gt; should respect printer build volume constraints" time="0.045911035">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; unit conversions &gt; should correctly convert inches to millimeters" time="0.000464529">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; unit conversions &gt; should use correct grid sizes" time="0.0003905">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; splitSpacerIfNeeded &gt; should split spacers that exceed max dimensions" time="0.001325208">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; splitSpacerIfNeeded &gt; should not split spacers within max dimensions" time="0.002906553">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; fillSpacerWithHalfSizeBins &gt; should fill spacer with half-size bins" time="0.001093925">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; fillSpacerWithHalfSizeBins &gt; should handle remainders when filling with half-size bins" time="0.000922485">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; combineHalfSizeBins &gt; should combine half-size bins into larger groups" time="0.000855009">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; combineHalfSizeBins &gt; should respect printer build volume when combining" time="0.020734178">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; getColor &gt; should return correct colors for different types" time="0.000469608">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; getColor &gt; should generate different colors for different indices" time="0.001473525">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.test.ts" name="gridfinityUtils &gt; Half-size bins with spacers &gt; should generate spacers when using half-size bins" time="0.003231783">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gridfinityUtils.uniformBaseplates.test.ts" timestamp="2025-08-15T14:55:39.028Z" hostname="pkrvmubgrv54qmi" tests="7" failures="0" errors="0" skipped="0" time="0.109186118">
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should avoid creating 1xN baseplates" time="0.066701778">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should use uniform 5x4 baseplates for 41.5&quot; x 13.5&quot; drawer when preferUniformBaseplates is true" time="0.006064318">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should use mixed baseplates for 41.5&quot; x 13.5&quot; drawer when preferUniformBaseplates is false" time="0.006702531">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should fall back to mixed sizes when uniform coverage is less than 90%" time="0.004357367">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should ignore preferUniformBaseplates when useHalfSize is true" time="0.015312169">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should prefer fewer variants over perfect coverage" time="0.004847072">
        </testcase>
        <testcase classname="src/utils/gridfinityUtils.uniformBaseplates.test.ts" name="Uniform Baseplates Calculation &gt; should handle edge cases with uniform baseplates" time="0.003405858">
        </testcase>
    </testsuite>
    <testsuite name="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" timestamp="2025-08-15T14:55:39.030Z" hostname="pkrvmubgrv54qmi" tests="12" failures="0" errors="0" skipped="3" time="0.707212028">
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should render when open" time="0.173682682">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should not render when closed" time="0.005822045">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should display dimension inputs with correct units for mm" time="0.053286953">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should display dimension inputs with correct units for inches" time="0.04798471">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should show preview with current dimensions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should handle input changes" time="0.116380413">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should display validation errors" time="0.077009965">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should call onConfirm with valid dimensions" time="0.082261394">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should not confirm with invalid dimensions" time="0.082111308">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should handle reset to default" time="0.066618867">
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should have correct step values for inputs" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/components/GridfinityCalculator/CustomPrinterDialog.test.tsx" name="CustomPrinterDialog &gt; should have correct step values for inch inputs" time="0">
            <skipped/>
        </testcase>
    </testsuite>
</testsuites>
